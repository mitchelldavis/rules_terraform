terraform_sums_url_template = "https://releases.hashicorp.com/terraform/{0}/terraform_{0}_SHA256SUMS"
terraform_sums_sig_url_template = "https://releases.hashicorp.com/terraform/{0}/terraform_{0}_SHA256SUMS.sig"
terraform_url_template = "https://releases.hashicorp.com/terraform/{0}/terraform_{0}_{1}_{2}.zip"
terraform_filename_template = "terraform_{0}_{1}_{2}.zip"

def toolchains(): 
    return {
    "terraform_linux": {
        "name": "terraform_linux",
        "exec_compatible_with": [
            "@bazel_tools//platforms:linux",
            "@bazel_tools//platforms:x86_64",
        ],
        "target_compatible_with": [
            "@bazel_tools//platforms:linux",
            "@bazel_tools//platforms:x86_64",
        ],
        "verifier_url":"https://github.com/mitchelldavis/hashicorp_verifier/releases/download/v0.0.5/hashicorp_verifier_linux_amd64",
        "verifier_checksum":"0c90e08dd9ef21dd6fbca275488ca5b722a8d0a5d8b9ae13e34585277ad46702",
        "toolchain":":terraform_linux",
        "toolchain_type":"@io_bazel_rules_terraform//:toolchain_type",
        "host": "linux",
        "arch": "amd64"
    },
    "terraform_osx": {
        "name": "terraform_osx",
        "exec_compatible_with": [
            "@bazel_tools//platforms:osx",
            "@bazel_tools//platforms:x86_64",
        ],
        "target_compatible_with": [
            "@bazel_tools//platforms:osx",
            "@bazel_tools//platforms:x86_64",
        ],
        "verifier_url":"https://github.com/mitchelldavis/hashicorp_verifier/releases/download/v0.0.5/hashicorp_verifier_darwin_amd64",
        "verifier_checksum":"cee435dbbaf3a66ca74da3449e3c315610dea01d7d812e3b667c1a734fe10dcd",
        "toolchain":":terraform_osx",
        "toolchain_type":"@io_bazel_rules_terraform//:toolchain_type",
        "host": "darwin",
        "arch": "amd64"
    }
}

TerraformInfo = provider(
    doc = "Information on how to call terraform",
    fields = [
        "executable"
    ],
)

def _terraform_toolchain_impl(ctx):
    toolchain_info = platform_common.ToolchainInfo(
        terraforminfo = TerraformInfo(
            executable = ctx.attr.executable,
        ),
    )
    return [toolchain_info]

terraform_toolchain = rule(
    implementation = _terraform_toolchain_impl,
    attrs = {
        "executable": attr.string()
    }
)

def setup_terraform_toolchains():
    for name, toolchain in toolchains().items():
        terraform_toolchain(
            name = toolchain["name"],
            executable = "",
        )
        native.toolchain(
            name = "{0}_toolchain".format(toolchain["name"]),
            exec_compatible_with = toolchain["exec_compatible_with"],
            target_compatible_with = toolchain["target_compatible_with"],
            toolchain = toolchain["toolchain"],
            toolchain_type = toolchain["toolchain_type"]
        )

def _download_verifier_impl(ctx):
    pass

_download_verifier = repository_rule(
    implementation = _download_verifier_impl
)

def _download_terraform_impl(ctx):
    if ctx.os.name == "linux":
        toolchain_name = "terraform_linux"
    elif ctx.os.name == "mac os x":
        toolchain_name = "terraform_osx"
    else:
        fail("Unsupported operating system: " + ctx.os.name)

    toolchain = toolchains()[toolchain_name]
    version = ctx.attr.version
    host = toolchain["host"]
    arch = toolchain["arch"]

    # Download Verifier
    ctx.download(
        url = toolchain["verifier_url"],
        sha256 = toolchain["verifier_checksum"],
        output = "hashicorp_verifier",
        executable = True
    )

    # Setup the Public Key
    ctx.symlink(
        Label("@io_bazel_rules_terraform//rules_terraform:hashicorp.pub"),
        "hashicorp.pub"
    )

    # Download The SHA256SUM File
    ctx.download(
        url = terraform_sums_url_template.format(version, host),
        output = "terraform_SHA256SUM",
        executable = False
    )

    # Download The SHA256SUM.sig File
    ctx.download(
        url = terraform_sums_sig_url_template.format(version, host),
        output = "terraform_SHA256SUM.sig",
        executable = False
    )

    # Verify the SHA256SUM File Signature.
    result = ctx.execute(
        [
            "./hashicorp_verifier",
            "signature",
            "-key=hashicorp.pub",
            "-sig=terraform_SHA256SUM.sig",
            "-target=terraform_SHA256SUM"
        ],
        quiet = False
    )
    if result.return_code != 0:
        fail("Unable to verify the Terraform executable: {0}".format(result.stderr))

    # Extract the SHA256SUM for Terraform.
    result = ctx.execute(
        [
            "./hashicorp_verifier",
            "extract",
            "-filename={0}".format(
                terraform_filename_template.format(
                    version,
                    host,
                    arch
                )
            ),
            "-shasum=terraform_SHA256SUM"
        ],
        quiet = False
    )
    if result.return_code != 0:
        fail("Unable to extract the Terraform checksum: {0}".format(result.stderr))
    checksum = result.stdout

    # Download the Terraform Executable
    ctx.file("BUILD.bazel",
"""
filegroup(
    name = "terraform_executable",
    srcs = ["terraform/terraform"],
    visibility = ["//visibility:public"]
)
""",
        executable=False
    )
    ctx.download_and_extract(
        url = terraform_url_template.format(version, host, arch),
        sha256 = checksum.strip(),
        output = "terraform",
        type = "zip",
    )

download_terraform = repository_rule(
    implementation = _download_terraform_impl,
    attrs = {
        "version": attr.string(
            mandatory = True),
    }
)

# TODO:  Need to define the plugin provider system
#def _terraform_provider_plugin_impl(ctx):
#    pass
#
#terraform_provider_plugin = repository_rule(
#    implementation = _terraform_provider_plugin_impl,
#    attrs = {
#        "name": attr.string(
#            mandatory = True
#        ),
#        "version": attr.string(
#            mandatory = True
#        )
#    }
#)

def _terraform_plan(ctx):
    deps = depset(ctx.files.srcs)
    ctx.actions.run(
        executable = ctx.executable._exec,
        inputs = deps.to_list(),
        outputs = [ctx.outputs.out],
        mnemonic = "TerraformInitialize",
        arguments = [
            "plan",
            "-out={0}".format(ctx.outputs.out.path), deps.to_list()[0].dirname
        ]
    )

terraform_plan = rule(
    implementation = _terraform_plan,
    attrs = {
        "srcs": attr.label_list(
            mandatory = True,
            allow_files = True
        ),
        "_exec": attr.label(
            default = Label("@terraform_exec//:terraform_executable"),
            allow_files = True,
            executable = True,
            cfg = "host"
        )
    },
    toolchains = ["@io_bazel_rules_terraform//:toolchain_type"],
    outputs = {"out": "%{name}.out"},
)

def terraform_register_toolchains(version="0.11.11"):
    if "download_terraform" not in native.existing_rules():
        download_terraform(
            name = "terraform_exec",
            version = version
        )

    for name, toolchain in toolchains().items():
        native.register_toolchains(
            "//rules_terraform:{0}_toolchain".format(toolchain["name"]),
        )
